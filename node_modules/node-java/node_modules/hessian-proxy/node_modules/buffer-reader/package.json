{
  "name": "buffer-reader",
  "version": "0.0.2",
  "description": "a reader for nodejs buffer",
  "main": "index.js",
  "scripts": {
    "test": "make test"
  },
  "repository": {
    "type": "git",
    "url": "git@github.com:villadora/node-buffer-reader.git"
  },
  "keywords": [],
  "dependencies": {},
  "devDependencies": {
    "jshint": "~2.1.9",
    "mocha": "~1.12.0",
    "chai": "~1.7.2",
    "buffer-builder": "*"
  },
  "readmeFilename": "README.md",
  "author": {
    "name": "wei.gao",
    "email": "jky239@gmail.com"
  },
  "license": "BSD",
  "readme": "# Node Buffer Reader\n\nMake raeding data from a binary buffer easily.\n\n\n<!--- travis ci -->\n[![Build Status](https://travis-ci.org/villadora/node-buffer-reader.png?branch=master)](https://travis-ci.org/villadora/node-buffer-reader)\n\n\n## Install\n\nnpm install buffer-reader\n\n## Usage\n\n``` js\nvar BufferReader = require('buffer-reader');\nvar reader = new BufferReader(buffer);\n\n// Read next N bytes as string\nvar str = reader.nextString(10);\n\n// Read next N bytes as buffer\nvar buf = reader.nextBuffer(10);\n\n// Read next 2 bytes as Int16LE\nvar i = reader.nextInt16LE();\n\n\n// Read next 8 bytes as DoubleLE\nvar d = reader.nextDoubleLE();\n\n// Get all rest bytes as buffer\nvar rest = reader.restAll();\n\n// OutOfBound will raise exception\ntry {\n    reader.nextString(1);\n}cache(e) {\n    //  handle exception\n}\n\n// Append buffer to reader\nreader.append(newbuffer);\n\n// Read again\nreader.nextString(1);\n\n```\n\n\n## APIs\n\n### new BufferReader([buffer])\nCreate a new reader, if no buffer provided, a empty buffer will be used.\n\n### append(buffer)\nAppend new buffer to the end of current reader\n\n### tell()\nReturn current position of the reader\n\n\n### seek(pos)\nSet new position of the reader, if the pos is invalid, an exception will be raised\n\n### move(offset) \nMove the position of reader by offset, offset can be negative; it can be used to skip some bytes\n\n### restAll()\nGet all the remaining bytes as a Buffer\n\n### nextBuffer(length)\nRead a buffer with specified length\n\n### nextString(length, [encoding])\nRead next length of bytes as String, encoding default is 'utf8'\n\n### next(Int8|UInt8)\\[(Int16|UInt16|Int32|UInt32|Float|Double)(LE|BE)\\]()\nRead next bytes as given types, the value is just as the same format Buffer in nodejs doc.\n\n## License\n\n(The BSD License)\n\nCopyright (c) 2013, Villa.Gao <jky239@gmail.com>;\nAll rights reserved.\n",
  "bugs": {
    "url": "https://github.com/villadora/node-buffer-reader/issues"
  },
  "_id": "buffer-reader@0.0.2",
  "dist": {
    "shasum": "b294b8f93b774bf61197e6418095aa981f6f7647",
    "tarball": "http://registry.npmjs.org/buffer-reader/-/buffer-reader-0.0.2.tgz"
  },
  "_from": "buffer-reader@>=0.0.2 <0.1.0",
  "_npmVersion": "1.2.25",
  "_npmUser": {
    "name": "villadora",
    "email": "jky239@gmail.com"
  },
  "maintainers": [
    {
      "name": "villadora",
      "email": "jky239@gmail.com"
    }
  ],
  "directories": {},
  "_shasum": "b294b8f93b774bf61197e6418095aa981f6f7647",
  "_resolved": "https://registry.npmjs.org/buffer-reader/-/buffer-reader-0.0.2.tgz",
  "homepage": "https://github.com/villadora/node-buffer-reader"
}
