Install log for: ruby

=> Downloading ...
=> Extracting archive...
=> Compiling...
=> Installing...
=> Activating...
=> Installed ruby 2.0.0
============ ruby ============
Ruby and rbenv (Ruby Version Manager) are preinstalled on all Codio Boxes.

http://flowingdata.com/2012/08/02/how-to-make-an-interactive-network-visualization/


Install log for: apache2

=> Downloading http://parts.codio.com/box-codio-v1/apr-1.5.1-binary.tar.gz...
=> Extracting archive...
=> Installing...
=> Activating...
=> Installed apr 1.5.1
=> Downloading http://parts.codio.com/box-codio-v1/apr_util-1.5.3-binary.tar.gz...
=> Extracting archive...
=> Installing...
=> Activating...
=> Installed apr_util 1.5.3
=> Downloading http://parts.codio.com/box-codio-v1/apache2-2.4.9-binary.tar.gz...
=> Extracting archive...
=> Installing...
=> Activating...
=> Installed apache2 2.4.9


============ apache2 ============
To start the Apache server:
  $ parts start apache2

To stop the Apache server:
  $ parts stop apache2

Apache config is located at:
  $ /home/codio/.parts/etc/apache2/httpd.conf

Default document root is located at:
  $ /home/codio/workspace

git remote add origin git@github.com:johnfkraus/aqlist-visualization.git
git push -u origin master

With define you register a module in require.js that you than can depend on in other module definitions or
require statements. With require you "just" load/use a module or javascript file that can be loaded by require.js.
For examples have a look at the documentation

My rule of thumb:
Define: If you want to declare a module other parts of your application will depend on.
Require: If you just want to load and use stuff.
…or create a new repository on the command line

touch README.md
git init
git add README.md
git commit -m "first commit"
git remote add origin git@github.com:johnfkraus/aq-list-viz.git
git push -u origin master
…or push an existing repository from the command line

git remote add origin git@github.com:johnfkraus/aq-list-viz.git
git push -u origin master
…or import code from another repository

You can initialize this repository with code from a Subversion, Mercurial, or TFS project.


SSH / Generating SSH keys

Generating SSH keys

Skip this guide. Download our native app instead.Download GitHub for Windows
SSH keys are a way to identify trusted computers, without involving passwords.
The steps below will walk you through generating an SSH key and then adding the public key to your GitHub account.

Tip: We recommend that you regularly review your SSH keys list and revoke any that haven't been used in a while.

Step 1: Check for SSH keys

First, we need to check for existing SSH keys on your computer. Open up your Git Bash and type:

ls -al ~/.ssh
# Lists the files in your .ssh directory, if they exist
Check the directory listing to see if you already have a public SSH key. The default public key file names are:

id_dsa.pub
id_ecdsa.pub
id_ed25519.pub
id_rsa.pub

Step 2: Generate a new SSH key

To generate a new SSH key, copy and paste the text below, making sure to substitute in your email address.
The default settings are preferred, so when you're prompted to "Enter a file in which to save the key",
just press Enter to continue.

ssh-keygen -t rsa -C "your_email@example.com"

ssh-keygen -t rsa -C "johnkraus3@gmail.com"

# Creates a new ssh key, using the provided email as a label
# Generating public/private rsa key pair.
# Enter file in which to save the key (/c/Users/you/.ssh/id_rsa): [Press enter]
Next, you'll be asked to enter a passphrase.

Tip: We strongly recommend a very good, secure passphrase. For more information, see Working with SSH key passphrases.
# Enter passphrase (empty for no passphrase): [Type a passphrase]
# Enter same passphrase again: [Type passphrase again]

Which should give you something like this:

 # Your identification has been saved in /c/Users/you/.ssh/id_rsa.
# Your public key has been saved in /c/Users/you/.ssh/id_rsa.pub.
# The key fingerprint is:
# 01:0f:f4:3b:ca:85:d6:17:a1:7d:f0:68:9d:f0:a2:db your_email@example.com
Then add your new key to the ssh-agent:

USE GIT BASH
 # start the ssh-agent in the background
ssh-agent -s
# Agent pid 59566
ssh-add ~/.ssh/id_rsa
Step 3: Add your SSH key to your account

Run the following command to copy the key to your clipboard. Keep in mind that your key may also be
named id_dsa.pub, id_ecdsa.pub or id_ed25519.pub.

clip < ~/.ssh/id_rsa.pub

# Copies the contents of the id_rsa.pub file to your clipboard
Alternatively, using your favorite text editor, you can open the public key file and copy the contents of the file manually.

Now that you have the key copied, it's time to add it to GitHub:

Settings icon in the user bar
In the top right corner of any page, click .

SSH keysIn the user settings sidebar, click SSH keys.

SSH Key button
Click Add SSH key.

In the Title field, add a descriptive label for the new key. For example, if you're using a personal Mac, you might call this key "Personal MacBook Air".
The key fieldPaste your key into the "Key" field.
The Add key buttonClick Add key.
Confirm the action by entering your GitHub password.
Step 4: Test everything out

To make sure everything is working, you'll now try SSHing to GitHub. When you do this, you will be asked to authenticate this action using your password, which was the passphrase you created earlier.

Open up your Git Bash and type:

ssh -T git@github.com
# Attempts to ssh to GitHub
You may see this warning:

# The authenticity of host 'github.com (207.97.227.239)' can't be established.
# RSA key fingerprint is 16:27:ac:a5:76:28:2d:36:63:1b:56:4d:eb:df:a6:48.
# Are you sure you want to continue connecting (yes/no)?
Don't worry! This is supposed to happen. Verify that the fingerprint in your terminal matches the one we've provided up above, and then type "yes."

# Hi username! You've successfully authenticated, but GitHub does not
# provide shell access.
If that username is yours, you've successfully set up your SSH key! Don't worry about the "shell access" thing, you don't want that anyway.

If you receive a message about "access denied," you can read these instructions for diagnosing the issue.

If you're switching from HTTPS to SSH, you'll now need to update your remote repository URLs. For more information, see Changing a remote's URL.


Argument for @NotNull parameter 'e' of com/intellij/openapi/ActionSystem/AnAction.update must not be null


Short path to browser:

"C:\Program Files\Internet Explorer\iexplore.exe"
cmd /c for %A in ("C:\Documents and Settings\User\NTUSER.DAT") do @echo %~sA
cmd /c for %A in ("C:\Program Files\Internet Explorer\iexplore.exe") do @echo %~sA
C:\PROGRA~1\INTERN~1\iexplore.exe



    2  heroku login
   10  git clone https://github.com/heroku/node-js-getting-started.git
   11  cd node-js-getting-started/
   16  heroku create --http-git
   18  git push heroku master
   19  heroku ps:scale web=1
   20  heroku open
   21  heroku logs --tail
   28  cd .ssh
   32  clip < ~/.ssh/id_rsa.pub

heroku auth:token

heroku keys:add

heroku keys:remove adam@workstation.local

heroku keys

Validate the connection

You can check to see whether your keys are working by trying the following command:

ssh -v git@heroku.com
